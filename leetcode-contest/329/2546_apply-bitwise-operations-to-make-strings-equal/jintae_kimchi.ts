/**
 * https://leetcode.com/problems/apply-bitwise-operations-to-make-strings-equal/description/
 * failed
 * Runtime 65 ms Beats 100%
 * Memory 47.1 MB Beats 50%
 *
 * 문제를 읽으면 일단 진리표를 그리고 싶어진다
 * 그리고 아래와 같은 표를 얻을 수 있다
 *  i   j   res
 *  0   0   0   0   : (0, 0) 의 결과는 항상 (0, 0)
 *  0   1   1   1   : (0, 1) 의 결과는 항상 (1, 1)
 *  1   0   1   1   : (0, 1) 의 결과는 항상 (1, 1)
 *  1   1   1   0   : (1, 1) 의 결과는 (1, 0) 또는 (0, 1)
 *
 * 직관적으로 이해하기 위해 가장 작은 테스트 케이스로 확인해보면..
 * s: 00, t: 00 => same
 * s: 00, t: 01 => 답이 없음
 * s: 00, t: 10 => 답이 없음
 * s: 00, t: 11 => 답이 없음
 * s: 01, t: 00 => 답이 없음
 * s: 01, t: 01 => same
 * s: 01, t: 10 => 01->11->10
 * s: 01, t: 11 => 01->11
 * s: 10, t: 01 => 10->11->01
 * ...
 *
 * 1) 같은 값인 케이스와
 * 2) 한쪽 값이 모두 0인 케이스
 * 3) 01, 10, 11 인케이스가 서로 변환 가능한 케이스
 *    01 == 10 == 11 이라고 볼 수 있다.
 *
 * 자릿수가 늘어나도 모든 값이 0인 케이스를 제외하고 변환이 가능하다는 것을 확인 할 수 있다.
 * (0001 => 1111)
 *
 * 그럼 답은 한쪽만 모든 값이 0인 케이스만 검사하는 조건이라는 결론
 */

function makeStringsEqual(s: string, target: string): boolean {
  // 00, 00 예외 케이스 제외하고 양쪽에 1이 하나라도 있으면 참
  return s === target || (s.includes("1") && target.includes("1"));
}
